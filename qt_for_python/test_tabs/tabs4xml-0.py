# https://doc.qt.io/qtforpython/gettingstarted.html

import sys
from PySide6 import QtCore, QtWidgets, QtGui
from PySide6.QtWidgets import QFrame,QApplication,QWidget,QTabWidget,QFormLayout,QLineEdit, QHBoxLayout,QVBoxLayout,QRadioButton,QLabel,QCheckBox,QComboBox

  
class PhysiCellXMLCreator(QTabWidget):
    def __init__(self, parent = None):
        super(PhysiCellXMLCreator, self).__init__(parent)
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.tab3 = QWidget()

        self.addTab(self.tab3,"Cell Defs")
        self.addTab(self.tab1,"Config Basics")
        self.addTab(self.tab2,"Microenvironment")
        self.tab_config()
        self.tab_microenv()
        self.tab_cell_defs()
        self.setWindowTitle("PhysiCell configuration")
		
    def tab_config(self):
        layout = QFormLayout()
        layout.addRow("Name",QLineEdit())
        layout.addRow("Address",QLineEdit())
        # self.setTabText(0,"Config Basics")
        self.tab1.setLayout(layout)
		
    def tab_microenv(self):
        layout = QFormLayout()
        sex = QHBoxLayout()
        sex.addWidget(QRadioButton("Male"))
        sex.addWidget(QRadioButton("Female"))
        layout.addRow(QLabel("Sex"),sex)
        layout.addRow("Date of Birth",QLineEdit())
        # self.setTabText(1,"Microenvironment")
        self.tab2.setLayout(layout)
		
    def tab_cell_defs(self):
        units_width = 70
        label_width = 210

        layout = QVBoxLayout()

        self.params_cell_def = QWidget()
        layout = QVBoxLayout()

        self.params_config = QWidget()

        self.cycle_dropdown = QComboBox()
        self.cycle_dropdown.setFixedWidth(300)
        self.cycle_dropdown.currentIndexChanged.connect(self.cycle_changed_cb)

        # Rf. Section 17 of User Guide
        self.cycle_dropdown.addItem("live cells")
        self.cycle_dropdown.addItem("basic Ki67")
        self.cycle_dropdown.addItem("advanced Ki67")
        self.cycle_dropdown.addItem("flow cytometry")
        self.cycle_dropdown.addItem("flow cytometry separated")
        self.cycle_dropdown.addItem("cycling quiescent")
        self.cycle_dropdown.addItem("live apoptotic")
        self.cycle_dropdown.addItem("total cells")

        layout.addWidget(self.cycle_dropdown)

        #=====  Phenotype 
        #============  Cycle ================================
        label = QLabel("Phenotype: cycle")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)

        hbox = QHBoxLayout()
        label = QLabel("Phase 0->0 transition rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)

        self.cycle_trate0_0 = QLineEdit()
        self.cycle_trate0_0.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cycle_trate0_0)

        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        #----------
        hbox = QHBoxLayout()
        label = QLabel("Phase 0->1 transition rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)

        self.cycle_trate0_1 = QLineEdit()
        self.cycle_trate0_1.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cycle_trate0_1)

        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        #----------
        hbox = QHBoxLayout()
        label = QLabel("Phase 1->2 transition rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)

        self.cycle_trate1_2 = QLineEdit()
        self.cycle_trate1_2.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cycle_trate1_2)

        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        #----------
        hbox = QHBoxLayout()
        label = QLabel("Phase 2->3 transition rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)

        self.cycle_trate2_3 = QLineEdit()
        self.cycle_trate2_3.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cycle_trate2_3)

        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        #----------
        hbox = QHBoxLayout()
        label = QLabel("Phase 3->0 transition rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)

        self.cycle_trate3_0 = QLineEdit()
        self.cycle_trate3_0.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cycle_trate3_0)

        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        #============  Death ================================
        label = QLabel("Phenotype: death")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)
        # layout.addWidget(QHLine())

        #-----
        label = QLabel("Apoptosis")
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setStyleSheet('background-color: yellow')
        layout.addWidget(label)

        hbox = QHBoxLayout()
        label = QLabel("death rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.death_apop_rate = QLineEdit()
        self.death_apop_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.death_apop_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("phase 0 duration")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.phase0_duration = QLineEdit()
        self.phase0_duration.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.phase0_duration)
        units = QLabel("min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("phase 1 duration")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.phase1_duration = QLineEdit()
        self.phase1_duration.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.phase1_duration)
        units = QLabel("min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("unlysed_fluid_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.apoptosis_unlysed_rate = QLineEdit()
        self.apoptosis_unlysed_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.apoptosis_unlysed_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("lysed_fluid_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.apoptosis_lysed_rate = QLineEdit()
        self.apoptosis_lysed_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.apoptosis_lysed_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("cytoplasmic_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.apoptosis_cytoplasmic_biomass_change_rate = QLineEdit()
        self.apoptosis_cytoplasmic_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.apoptosis_cytoplasmic_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("nuclear_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.apoptosis_nuclear_biomass_change_rate = QLineEdit()
        self.apoptosis_nuclear_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.apoptosis_nuclear_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("calcification_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.calcification_rate = QLineEdit()
        self.calcification_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.calcification_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("relative_rupture_volume")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.relative_rupture_volume = QLineEdit()
        self.relative_rupture_volume.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.relative_rupture_volume)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        #-----------------------------------------------------------
        # layout.addWidget(QHLine())
        label = QLabel("Necrosis")
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setStyleSheet('background-color: yellow')
        layout.addWidget(label)
        # layout.addWidget(QHLine())

        # label_width = 210
        # units_width = 45
        hbox = QHBoxLayout()
        label = QLabel("death rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.death_necrosis_rate = QLineEdit()
        self.death_necrosis_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.death_necrosis_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("phase 0 duration")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.phase0_duration = QLineEdit()
        self.phase0_duration.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.phase0_duration)
        units = QLabel("min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("phase 1 duration")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.phase1_duration = QLineEdit()
        self.phase1_duration.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.phase1_duration)
        units = QLabel("min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("unlysed_fluid_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.necrosis_unlysed_rate = QLineEdit()
        self.necrosis_unlysed_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.necrosis_unlysed_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("lysed_fluid_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.necrosis_lysed_rate = QLineEdit()
        self.necrosis_lysed_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.necrosis_lysed_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("cytoplasmic_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.necrosis_cytoplasmic_biomass_change_rate = QLineEdit()
        self.necrosis_cytoplasmic_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.necrosis_cytoplasmic_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("nuclear_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.necrosis_nuclear_biomass_change_rate = QLineEdit()
        self.necrosis_nuclear_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.necrosis_nuclear_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("calcification_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.calcification_rate = QLineEdit()
        self.calcification_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.calcification_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("relative_rupture_volume")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.relative_rupture_volume = QLineEdit()
        self.relative_rupture_volume.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.relative_rupture_volume)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        #============  Volume ================================
        label = QLabel("Phenotype: volume")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)

        hbox = QHBoxLayout()
        label = QLabel("total")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.volume_total = QLineEdit()
        self.volume_total.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.volume_total)
        units = QLabel("micron^3")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("fluid_fraction")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.volume_fluid_fraction = QLineEdit()
        self.volume_fluid_fraction.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.volume_fluid_fraction)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("nuclear")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.volume_nuclear = QLineEdit()
        self.volume_nuclear.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.volume_nuclear)
        units = QLabel("micron^3")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("fluid_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.volume_fluid_change_rate = QLineEdit()
        self.volume_fluid_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.volume_fluid_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("cytoplasmic_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.cytoplasmic_biomass_change_rate = QLineEdit()
        self.cytoplasmic_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cytoplasmic_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("nuclear_biomass_change_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.nuclear_biomass_change_rate = QLineEdit()
        self.nuclear_biomass_change_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.nuclear_biomass_change_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        
        hbox = QHBoxLayout()
        label = QLabel("calcified_fraction")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.calcified_fraction = QLineEdit()
        self.calcified_fraction.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.calcified_fraction)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("calcified_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.calcified_rate = QLineEdit()
        self.calcified_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.calcified_rate)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)
        
        #============  Mechanics ================================
        label = QLabel("Phenotype: mechanics")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)
        # layout.addWidget(QHLine())

        hbox = QHBoxLayout()
        label = QLabel("cell_cell_adhesion_strength")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.cell_cell_adhesion_strength = QLineEdit()
        self.cell_cell_adhesion_strength.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cell_cell_adhesion_strength)
        units = QLabel("micron/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("cell_cell_repulsion_strength")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.cell_cell_repulsion_strength = QLineEdit()
        self.cell_cell_repulsion_strength.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.cell_cell_repulsion_strength)
        units = QLabel("micron/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("relative_maximum_adhesion_distance")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.relative_maximum_adhesion_distance = QLineEdit()
        self.relative_maximum_adhesion_distance.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.relative_maximum_adhesion_distance)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)
    
        hbox = QHBoxLayout()
        label = QLabel("set_relative_equilibrium_distance")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.set_relative_equilibrium_distance = QLineEdit()
        self.set_relative_equilibrium_distance.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.set_relative_equilibrium_distance)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("set_absolute_equilibrium_distance")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.set_absolute_equilibrium_distance = QLineEdit()
        self.set_absolute_equilibrium_distance.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.set_absolute_equilibrium_distance)
        units = QLabel("micron")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)


        #============  Motility ================================
        label = QLabel("Phenotype: motility")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)
        # layout.addWidget(QHLine())

        hbox = QHBoxLayout()
        label = QLabel("speed")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.speed = QLineEdit()
        self.speed.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.speed)
        units = QLabel("micron/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("persistence_time")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.persistence_time = QLineEdit()
        self.persistence_time.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.persistence_time)
        units = QLabel("min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("migration_bias")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.migration_bias = QLineEdit()
        self.migration_bias.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.migration_bias)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        self.motility_enabled = QCheckBox("enable")
        # self.motility_enabled.setAlignment(QtCore.Qt.AlignRight)
        # label.setFixedWidth(label_width)
        hbox.addWidget(self.motility_enabled)

        self.motility_2D = QCheckBox("2D")
        # self.motility_2D.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(self.motility_2D)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("Chemotaxis")
        label.setFixedWidth(200)
        label.setAlignment(QtCore.Qt.AlignCenter)
        label.setStyleSheet('background-color: yellow')
        hbox.addWidget(label)

        self.chemotaxis_enabled = QCheckBox("enabled")
        # self.motility_2D.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(self.chemotaxis_enabled)
        layout.addLayout(hbox)

        self.motility_substrate_dropdown = QComboBox()
        self.motility_substrate_dropdown.setFixedWidth(300)
        # self.cycle_dropdown.currentIndex.connect(self.cycle_changed_cb)
        # self.motility_substrate_dropdown.currentIndexChanged.connect(self.motility_substrate_changed_cb)
        self.motility_substrate_dropdown.addItem("oxygen")
        layout.addWidget(self.motility_substrate_dropdown)

        #============  Secretion ================================
        label = QLabel("Phenotype: secretion")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)

        label = QLabel("oxygen")
        label.setStyleSheet('background-color: lightgreen')
        label.setFixedWidth(150)
        layout.addWidget(label)

        hbox = QHBoxLayout()
        label = QLabel("secretion_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.secretion_rate1 = QLineEdit()
        self.secretion_rate1.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.secretion_rate1)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("target")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.secretion_target1 = QLineEdit()
        self.secretion_target1.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.secretion_target1)
        units = QLabel("")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("uptake_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.uptake_rate1 = QLineEdit()
        self.uptake_rate1.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.uptake_rate1)
        units = QLabel("1/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)

        hbox = QHBoxLayout()
        label = QLabel("net_export_rate")
        label.setFixedWidth(label_width)
        label.setAlignment(QtCore.Qt.AlignRight)
        hbox.addWidget(label)
        self.secretion_net_export_rate = QLineEdit()
        self.secretion_net_export_rate.setValidator(QtGui.QDoubleValidator())
        hbox.addWidget(self.secretion_net_export_rate)
        units = QLabel("total/min")
        units.setFixedWidth(units_width)
        units.setAlignment(QtCore.Qt.AlignLeft)
        hbox.addWidget(units)
        layout.addLayout(hbox)


        #============  Molecular ================================
        label = QLabel("Phenotype: molecular")
        label.setStyleSheet("background-color: orange")
        label.setAlignment(QtCore.Qt.AlignCenter)
        layout.addWidget(label)
        # layout.addWidget(QHLine())

        #=====  Custom data 
        label = QLabel("Custom data")
        label.setStyleSheet("background-color: cyan")
        layout.addWidget(label)

        #==================================================================
        self.params_cell_def.setLayout(layout)

        self.scroll = QtWidgets.QScrollArea()
        self.scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scroll.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scroll.setWidgetResizable(True)
        self.scroll.setWidget(self.params_cell_def)

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.addWidget(self.scroll)


    @QtCore.Slot()
    def save_xml(self):
        # self.text.setText(random.choice(self.hello))
        pass

    @QtCore.Slot()
    def cycle_changed_cb(self, idx):
        pass
        # QtWidgets.QMessageBox.information(self, "Cycle Changed:",
                #   "Current Cycle Index: %d" % idx )

    @QtCore.Slot()
    def tab_changed_cb(self, idx):
        # self.text.setText(random.choice(self.hello))
        # pass
        QtWidgets.QMessageBox.information(self, "Tab Index Changed!",
                  "Current Tab Index: %d" % idx )
        # if idx == 2:
        #     self.scroll.setWidget(self.params_cell_def)
        # else:
        #     self.scroll.setWidget(self.params_config)

		
def main():
    app = QApplication(sys.argv)
    ex = PhysiCellXMLCreator()
    ex.setGeometry(100,100, 700,600)
    ex.show()
    sys.exit(app.exec_())
	
if __name__ == '__main__':
    main()
